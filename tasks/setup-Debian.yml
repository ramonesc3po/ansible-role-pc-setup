---
- name: set timezone {{ timezone }}
  timezone:
    name: "{{ timezone }}"
  when: timezone != ""

- name: Sudoers
  lineinfile:
    dest: /etc/sudoers
    line: "{{ profile_user }} ALL=(ALL) NOPASSWD:ALL"
    insertafter: EOF
    validate: '/usr/sbin/visudo -cf %s'

- name: apt-get update
  command: sudo apt-get update

- name: install aptitude
  command: sudo apt-get install aptitude apt-transport-https ca-certificates curl gnupg2 software-properties-common -y

- name: Google Chrome apt-key
  apt_key:
    url: https://dl-ssl.google.com/linux/linux_signing_key.pub
    state: present

- name: Google Chrome repository
  lineinfile:
    dest: /etc/apt/sources.list.d/google.list
    line: "deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main"
    create: yes

- name: Docker-ce apt-key
  apt_key:
    url: https://download.docker.com/linux/debian/gpg
    state: present

- name: Docker ppa
  lineinfile:
    dest: /etc/apt/sources.list.d/docker-ce.list
    line: "deb [arch=amd64] https://download.docker.com/linux/debian stretch stable"
    create: yes
- command: sudo apt-get update
  ignore_errors: yes

- name: Add PPAs
  apt_repository:
    repo: '{{ item }}'
    validate_certs: no
  with_items:
    - ppa:noobslab/icons
    - ppa:gencfsm
    - ppa:otto-kesselgulasch/gimp-edge
    - ppa:graphics-drivers/ppa
    - ppa:daniruiz/flat-remix
  ignore_errors: yes

- name: Upgrade packages
  apt:
    upgrade: yes
    dpkg_options: 'force-confold,force-confdef'
    autoremove: yes
    update_cache: yes
  ignore_errors: yes

- name: Install requirements packages
  apt:
    name: "{{ requirements_install_packages }}"

- name: Install pip requirements packages
  pip:
    name: "{{ requirements_install_pip_packages }}"
    state: latest
    executable: pip3

- name: Install custom pip packages
  pip:
    name: "{{ install_pip_packages }}"
    state: latest
    executable: pip3
  when: install_pip_packages != ""

- name: Install custom packages
  apt:
    name: "{{ install_packages }}"

- name: Terminator Nord theme
  git:
    repo: https://github.com/arcticicestudio/nord-terminator.git
    dest: /tmp/nord
- file:
    path: '/home/{{ profile_user }}/.config/terminator'
    state: directory
    owner: '{{ profile_user }}'
    group: '{{ profile_user }}'
    mode: 0755
- copy:
    src: '/tmp/nord/src/config'
    dest: '/home/{{ profile_user }}/.config/terminator/config'
    owner: "{{ profile_user }}"
    group: "{{ profile_user }}"
    mode: 0644
- replace:
    dest: '/home/{{ profile_user }}/.config/terminator/config'
    regexp: 'nord'
    replace: 'default'
- lineinfile:
    dest: '/home/{{ profile_user }}/.config/terminator/config'
    regexp: '^background_color'
    insertafter: '^background_color'
    line: "    {{ item.property }} = {{ item.value }}"
  with_items:
    - { property: 'background_darkness', value: '0.9' }
    - { property: 'background_type', value: 'transparent' }
    - { property: 'scrollback_lines', value: '50000' }
    - { property: 'font', value: 'Liberation Mono 8' }
    - { property: 'use_system_font', value: 'False' }

- name: Configura powerline-shell
  blockinfile:
    dest: /etc/bash.bashrc
    insertafter: EOF
    content: |
      function _update_ps1() {
        PS1=$(powerline-shell $?)
      }
      if [[ $TERM != linux && ! $PROMPT_COMMAND =~ _update_ps1 ]]; then
         PROMPT_COMMAND="_update_ps1; $PROMPT_COMMAND"
      fi
